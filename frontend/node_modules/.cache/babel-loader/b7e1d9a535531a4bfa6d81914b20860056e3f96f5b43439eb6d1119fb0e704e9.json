{"ast":null,"code":"import api from './api';\n\n// собрать абсолютный URL из baseURL axios\nfunction buildUrl(path) {\n  var _api$defaults;\n  const base = ((api === null || api === void 0 ? void 0 : (_api$defaults = api.defaults) === null || _api$defaults === void 0 ? void 0 : _api$defaults.baseURL) || '').replace(/\\/+$/, '');\n  const p = path.startsWith('/') ? path : `/${path}`;\n  return base ? `${base}${p}` : p;\n}\n\n// читать файл из FormData\nfunction extractFile(formData) {\n  let file = null;\n  for (const [k, v] of formData.entries()) if (v instanceof File) {\n    file = v;\n    break;\n  }\n  return file;\n}\n\n// прочитать File в dataURL (base64)\nfunction fileToDataURL(file) {\n  return new Promise((resolve, reject) => {\n    const r = new FileReader();\n    r.onerror = reject;\n    r.onload = () => resolve(String(r.result)); // data:<mime>;base64,xxx\n    r.readAsDataURL(file);\n  });\n}\nasync function fetchJson(url, opts = {}) {\n  const res = await fetch(url, {\n    credentials: 'include',\n    ...opts\n  });\n  const ct = res.headers.get('content-type') || '';\n  const isJson = ct.includes('application/json');\n  if (!res.ok) {\n    var _payload;\n    let payload = {};\n    try {\n      payload = isJson ? await res.json() : {\n        message: await res.text()\n      };\n    } catch {}\n    const err = new Error(((_payload = payload) === null || _payload === void 0 ? void 0 : _payload.message) || res.statusText || 'Request failed');\n    err.status = res.status;\n    err.payload = payload;\n    throw err;\n  }\n  return isJson ? res.json() : {};\n}\n\n/* ---------- filters / list / detail ---------- */\nexport async function getFilters() {\n  const {\n    data\n  } = await api.get('/diplomas/filters');\n  return data;\n}\nexport async function getDiplomas(params = {}) {\n  const clean = {};\n  for (const [k, v] of Object.entries(params)) {\n    if (v === '' || v === null || v === undefined) continue;\n    if (k === 'page' || k === 'limit' || k === 'year') {\n      const n = Number(v);\n      if (Number.isFinite(n)) clean[k] = n;\n      continue;\n    }\n    clean[k] = v;\n  }\n  const {\n    data\n  } = await api.get('/diplomas', {\n    params: clean\n  });\n  return data;\n}\nexport async function getDiploma(id) {\n  const {\n    data\n  } = await api.get(`/diplomas/${id}`);\n  return data;\n}\n\n/* ---------- create/update with fallback ---------- */\nexport async function createDiploma(formData) {\n  try {\n    // 1) пробуем обычный multipart\n    return await fetchJson(buildUrl('/diplomas'), {\n      method: 'POST',\n      body: formData\n    });\n  } catch (e) {\n    var _e$payload;\n    if ((e === null || e === void 0 ? void 0 : e.status) === 400 && /File is required/i.test((e === null || e === void 0 ? void 0 : (_e$payload = e.payload) === null || _e$payload === void 0 ? void 0 : _e$payload.message) || e.message)) {\n      // 2) бэкап: шлём base64 JSON\n      const file = extractFile(formData);\n      if (!file) throw e;\n      const dataUrl = await fileToDataURL(file);\n      const json = Object.fromEntries(formData.entries());\n      delete json.file;\n      json.fileBase64 = dataUrl;\n      json.fileName = file.name;\n      json.fileType = file.type;\n      return await fetchJson(buildUrl('/diplomas'), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(json)\n      });\n    }\n    throw e;\n  }\n}\nexport async function updateDiploma(id, formData) {\n  try {\n    return await fetchJson(buildUrl(`/diplomas/${id}`), {\n      method: 'PATCH',\n      body: formData\n    });\n  } catch (e) {\n    var _e$payload2;\n    if ((e === null || e === void 0 ? void 0 : e.status) === 400 && /File is required/i.test((e === null || e === void 0 ? void 0 : (_e$payload2 = e.payload) === null || _e$payload2 === void 0 ? void 0 : _e$payload2.message) || e.message)) {\n      const file = extractFile(formData);\n      const json = Object.fromEntries(formData.entries());\n      if (file) {\n        delete json.file;\n        json.fileBase64 = await fileToDataURL(file);\n        json.fileName = file.name;\n        json.fileType = file.type;\n      }\n      return await fetchJson(buildUrl(`/diplomas/${id}`), {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(json)\n      });\n    }\n    throw e;\n  }\n}\n\n/* ---------- admin ops ---------- */\nexport async function deleteDiploma(id) {\n  const {\n    data\n  } = await api.delete(`/diplomas/${id}`);\n  return data;\n}\nexport async function verifyDiploma(id, value = true) {\n  const {\n    data\n  } = await api.patch(`/diplomas/${id}`, {\n    isVerified: !!value\n  });\n  return data;\n}\nexport async function unverifyDiploma(id) {\n  return verifyDiploma(id, false);\n}","map":{"version":3,"names":["api","buildUrl","path","_api$defaults","base","defaults","baseURL","replace","p","startsWith","extractFile","formData","file","k","v","entries","File","fileToDataURL","Promise","resolve","reject","r","FileReader","onerror","onload","String","result","readAsDataURL","fetchJson","url","opts","res","fetch","credentials","ct","headers","get","isJson","includes","ok","_payload","payload","json","message","text","err","Error","statusText","status","getFilters","data","getDiplomas","params","clean","Object","undefined","n","Number","isFinite","getDiploma","id","createDiploma","method","body","e","_e$payload","test","dataUrl","fromEntries","fileBase64","fileName","name","fileType","type","JSON","stringify","updateDiploma","_e$payload2","deleteDiploma","delete","verifyDiploma","value","patch","isVerified","unverifyDiploma"],"sources":["D:/Uknord5he/BH3/dev/diplomas/frontend/src/services/diplomaService.js"],"sourcesContent":["import api from './api';\r\n\r\n// собрать абсолютный URL из baseURL axios\r\nfunction buildUrl(path) {\r\n    const base = (api?.defaults?.baseURL || '').replace(/\\/+$/, '');\r\n    const p = path.startsWith('/') ? path : `/${path}`;\r\n    return base ? `${base}${p}` : p;\r\n}\r\n\r\n// читать файл из FormData\r\nfunction extractFile(formData) {\r\n    let file = null;\r\n    for (const [k, v] of formData.entries()) if (v instanceof File) { file = v; break; }\r\n    return file;\r\n}\r\n\r\n// прочитать File в dataURL (base64)\r\nfunction fileToDataURL(file) {\r\n    return new Promise((resolve, reject) => {\r\n        const r = new FileReader();\r\n        r.onerror = reject;\r\n        r.onload = () => resolve(String(r.result)); // data:<mime>;base64,xxx\r\n        r.readAsDataURL(file);\r\n    });\r\n}\r\n\r\nasync function fetchJson(url, opts = {}) {\r\n    const res = await fetch(url, { credentials: 'include', ...opts });\r\n    const ct = res.headers.get('content-type') || '';\r\n    const isJson = ct.includes('application/json');\r\n    if (!res.ok) {\r\n        let payload = {};\r\n        try { payload = isJson ? await res.json() : { message: await res.text() }; } catch {}\r\n        const err = new Error(payload?.message || res.statusText || 'Request failed');\r\n        err.status = res.status; err.payload = payload; throw err;\r\n    }\r\n    return isJson ? res.json() : {};\r\n}\r\n\r\n/* ---------- filters / list / detail ---------- */\r\nexport async function getFilters() {\r\n    const { data } = await api.get('/diplomas/filters'); return data;\r\n}\r\nexport async function getDiplomas(params = {}) {\r\n    const clean = {};\r\n      for (const [k, v] of Object.entries(params)) {\r\n            if (v === '' || v === null || v === undefined) continue;\r\n            if (k === 'page' || k === 'limit' || k === 'year') {\r\n                  const n = Number(v); if (Number.isFinite(n)) clean[k] = n; continue;\r\n                }\r\n            clean[k] = v;\r\n          }\r\n      const { data } = await api.get('/diplomas', { params: clean });\r\n      return data;}\r\nexport async function getDiploma(id) {\r\n    const { data } = await api.get(`/diplomas/${id}`); return data;\r\n}\r\n\r\n/* ---------- create/update with fallback ---------- */\r\nexport async function createDiploma(formData) {\r\n    try {\r\n        // 1) пробуем обычный multipart\r\n        return await fetchJson(buildUrl('/diplomas'), { method: 'POST', body: formData });\r\n    } catch (e) {\r\n        if (e?.status === 400 && /File is required/i.test(e?.payload?.message || e.message)) {\r\n            // 2) бэкап: шлём base64 JSON\r\n            const file = extractFile(formData);\r\n            if (!file) throw e;\r\n            const dataUrl = await fileToDataURL(file);\r\n            const json = Object.fromEntries(formData.entries());\r\n            delete json.file;\r\n            json.fileBase64 = dataUrl;\r\n            json.fileName = file.name;\r\n            json.fileType = file.type;\r\n            return await fetchJson(buildUrl('/diplomas'), {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(json),\r\n            });\r\n        }\r\n        throw e;\r\n    }\r\n}\r\n\r\nexport async function updateDiploma(id, formData) {\r\n    try {\r\n        return await fetchJson(buildUrl(`/diplomas/${id}`), { method: 'PATCH', body: formData });\r\n    } catch (e) {\r\n        if (e?.status === 400 && /File is required/i.test(e?.payload?.message || e.message)) {\r\n            const file = extractFile(formData);\r\n            const json = Object.fromEntries(formData.entries());\r\n            if (file) {\r\n                delete json.file;\r\n                json.fileBase64 = await fileToDataURL(file);\r\n                json.fileName = file.name;\r\n                json.fileType = file.type;\r\n            }\r\n            return await fetchJson(buildUrl(`/diplomas/${id}`), {\r\n                method: 'PATCH',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(json),\r\n            });\r\n        }\r\n        throw e;\r\n    }\r\n}\r\n\r\n/* ---------- admin ops ---------- */\r\nexport async function deleteDiploma(id) {\r\n    const { data } = await api.delete(`/diplomas/${id}`); return data;\r\n}\r\nexport async function verifyDiploma(id, value = true) {\r\n    const { data } = await api.patch(`/diplomas/${id}`, { isVerified: !!value }); return data;\r\n}\r\nexport async function unverifyDiploma(id) { return verifyDiploma(id, false); }\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}